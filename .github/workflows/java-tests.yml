# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Add a MySQL service
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: letmein
          MYSQL_DATABASE: medalnetdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: letmein
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=10
    

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Step 3: Build the project with Maven
    - name: Build with Maven
      env:
        SPRING_PROFILES_ACTIVE: ci
      run: mvn -B clean verify

    # Step 4: Run tests with database environment variables
    - name: Run Tests
      env:
        SPRING_PROFILES_ACTIVE: ci
      run: mvn test

    # Step 5: Upload JUnit test results as artifacts for easier inspection
    - name: Upload test results
      if: always()  # Ensures results are uploaded even if the test fails
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: target/surefire-reports/  # The default directory where test reports are saved